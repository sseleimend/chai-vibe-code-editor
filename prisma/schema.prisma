// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String       @unique
  image             String?
  accounts          Account[]
  role              UserRole     @default(USER)
  playground        Playground[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  starredPlayground StarMark[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Templates {
  REACT
  VUE
  ANGULAR
  NEXT
  EXPRESS
  HONO
}

model Playground {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  template      Templates      @default(REACT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String         @db.ObjectId
  starMark      StarMark[]
  templateFiles TemplateFile[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StarMark {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  playgroundId String     @db.ObjectId
  isMarked     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
}

model TemplateFile {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  playgroundId String     @unique @db.ObjectId
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}
